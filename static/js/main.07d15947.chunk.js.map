{"version":3,"sources":["components/AddTodo.js","components/TodoComponent.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","todo","title","id","handleSubmit","e","preventDefault","match","target","children","setAttribute","props","addTodo","value","setState","handleChange","removeAttribute","name","Date","getTime","className","onSubmit","this","autoComplete","type","onChange","Component","TodoComponent","removeTodo","onClick","App","todos","_id","filter","createTodos","length","map","CSSTransition","key","timeout","classNames","data","JSON","parse","localStorage","getItem","setItem","stringify","TransitionGroup","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.07d15947.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './styles/AddTodo.css'\nexport default class AddTodo extends Component {\n    state={\n        todo:{\n            title:\"\",\n            id:null\n        }\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        if (this.state.todo.title.match(/\\w+/)==null) { e.target.children[0].setAttribute(\"data-error\",\"data-error\");return false}\n        this.props.addTodo(this.state.todo)\n        e.target.children[0].value=null;\n        // e.target.children[2].style.animation=\"explode .1s\";\n        // e.target.children[2].style.animation=\"\";\n        // e.target.children[2].style.animation=\"added .3s .1s\";\n\n        this.setState({todo:{title:\"\",id:null}})\n    }\n\n    handleChange = e => {\n        let value = e.target.value\n        if (!value.match(/\\w+/))\n            e.target.setAttribute(\"data-error\",\"data-error\")\n        else  \n            e.target.removeAttribute(\"data-error\")\n        \n        this.setState({\n            todo: {\n                [e.target.name]:value,\n                id:new Date().getTime()\n            }\n        })\n    }\n\n    render() {\n        return (\n                <form className=\"form\" onSubmit={this.handleSubmit} autoComplete=\"off\" > \n                    <input type=\"text\" id=\"todoInput\" className=\"form__title\" name=\"title\" onChange={this.handleChange} />\n                    <input type=\"submit\" className=\"form__submit\" value=\"+\"/>\n                    <span className=\"form__anim\" id=\"oh\" ></span>\n                </form> \n        )\n    }\n}\n","import React from 'react'\nimport './styles/TodoComponent.css'\nexport default function TodoComponent({todo,removeTodo}) {\n    const {title,id} = todo\n    return (\n        <div className=\"todo\" >\n            <p className=\"todo__title\">{title}</p>\n            <button className=\"todo__remove\" onClick={(e)=>{removeTodo(id,e)}} >&#10003;</button>\n        </div>\n    )\n}\n","import React, {Component} from 'react';\nimport AddTodo from './components/AddTodo'\nimport './App.css';\nimport TodoComponent from './components/TodoComponent'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\n\nclass App extends Component {\n  state={\n    todos:[]\n  }\n  componentDidMount(){\n    var data = JSON.parse(localStorage.getItem(\"todos\"));\n    var todos= data==null ? [] :data\n    this.setState({\n      todos\n    })\n    // console.log(\"Mounted\",todos)\n  }\n\n  addTodo= (todo)=>{\n    this.setState((state)=>{\n      return {todos:[todo,...state.todos]};\n    })\n  }\n\n  removeTodo = (_id,e) =>{\n    // console.group(\"Remove section\")\n    // console.log(\"before\",this.state.todos)\n    this.setState(({todos})=>{\n      return {todos:  todos.filter(({id} )=> id!==_id)}\n    })\n    // console.log(\"after\",this.state.todos)\n    // console.groupEnd()\n\n  }\n\n  // componentWillUnmount(){console.log(\"got fired\")}\n\n  componentDidUpdate(){\n    // console.log(\"Updated\",this.state.todos)\n    localStorage.setItem(\"todos\",JSON.stringify(this.state.todos))\n  }\n\n  createTodos=()=>{\n    if (this.state.todos.length){\n      return (this.state.todos.map((todo)=>(\n        <CSSTransition key={todo.id} timeout={500} classNames=\"fade\">\n          <TodoComponent todo={todo} removeTodo={this.removeTodo} />\n        </CSSTransition>\n      )))\n\n    }else{\n      return(<div id=\"empty\" ><div>No- Todos left!</div></div>)\n    }\n    //  if(this.state.todos.length ===0 || this.state.todos.length===null) {\n    //   console.log(\"fuck\")\n    //   return ()\n    // }\n  }\n\n  render(){\n    return (\n      <div className=\"container \">\n        <h3>Todo App</h3>\n        <AddTodo addTodo={this.addTodo} />\n        <div className=\"cont\">\n        <TransitionGroup className=\"todo-list\" >\n        {/* { this.createTodos() } */}\n        {\n          this.state.todos.length<=0 ? \n          (\n            <CSSTransition key={-9} timeout={500} classNames=\"slow\">\n             <div id=\"empty\" >No Todos left !</div>\n            </CSSTransition>\n          \n          ):(\n            this.state.todos.map((todo)=>(\n            <CSSTransition key={todo.id} timeout={1000} classNames=\"fade\">\n              <TodoComponent todo={todo} removeTodo={this.removeTodo} />\n            </CSSTransition>))\n          )\n        }\n        </TransitionGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}